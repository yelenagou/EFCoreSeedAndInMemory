// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WiredBrainCoffeeShops.Migrations
{
    [DbContext(typeof(CoffeeShopContext))]
    [Migration("20180627015906_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BrewerType", b =>
                {
                    b.Property<int>("BrewerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("BrewerTypeId");

                    b.ToTable("BrewerTypes");

                    b.HasData(
                        new { BrewerTypeId = 1, Description = "Glass Hourglass Drip" },
                        new { BrewerTypeId = 2, Description = "Hand Press" },
                        new { BrewerTypeId = 3, Description = "Cold Brew" }
                    );
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CloseTime");

                    b.Property<string>("OpenTime");

                    b.Property<string>("StreetAddress");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new { LocationId = new Guid("01963dee-44f8-42f8-8f60-42e2ce8cf13d"), CloseTime = "4PM", OpenTime = "6AM", StreetAddress = "999 Main Street" }
                    );
                });

            modelBuilder.Entity("Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Acquired");

                    b.Property<int>("BrewerTypeId");

                    b.Property<Guid?>("LocationId");

                    b.HasKey("UnitId");

                    b.HasIndex("LocationId");

                    b.ToTable("Units");

                    b.HasData(
                        new { UnitId = 1, Acquired = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), BrewerTypeId = 2, LocationId = new Guid("01963dee-44f8-42f8-8f60-42e2ce8cf13d") },
                        new { UnitId = 2, Acquired = new DateTime(2018, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), BrewerTypeId = 1 }
                    );
                });

            modelBuilder.Entity("BrewerType", b =>
                {
                    b.OwnsOne("Recipe", "Recipe", b1 =>
                        {
                            b1.Property<int?>("BrewerTypeId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("BrewMinutes");

                            b1.Property<string>("Description");

                            b1.Property<int>("GrindOunces");

                            b1.Property<int>("GrindSize");

                            b1.Property<int>("WaterOunces");

                            b1.Property<int>("WaterTemperatureF");

                            b1.ToTable("BrewerTypes");

                            b1.HasOne("BrewerType")
                                .WithOne("Recipe")
                                .HasForeignKey("Recipe", "BrewerTypeId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new { BrewerTypeId = 1, BrewMinutes = 3, Description = "So good!", GrindOunces = 2, GrindSize = 2, WaterOunces = 9, WaterTemperatureF = 130 },
                                new { BrewerTypeId = 2, BrewMinutes = 1, Description = "Love a hand pressed coffee!", GrindOunces = 2, GrindSize = 2, WaterOunces = 9, WaterTemperatureF = 130 },
                                new { BrewerTypeId = 3, BrewMinutes = 60, Description = "Cold brew is worth the wait!", GrindOunces = 2, GrindSize = 2, WaterOunces = 9, WaterTemperatureF = 130 }
                            );
                        });
                });

            modelBuilder.Entity("Unit", b =>
                {
                    b.HasOne("Location")
                        .WithMany("BrewingUnits")
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
